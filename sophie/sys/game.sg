# Types and functions useful for making 2-D interactive games. Oh, and a driver.
#
# Eventually.
#
# For now, it's just a spike.

import:
    foreign "sophie.adapters.game_adapter"() where
        events : GameLoop;
    end;

type:
    screen is (size:rect, background:color);
    color is (red:number, green:number, blue:number);
    rect is (x:number, y:number);
    polar is (magnitude:number, angle:number);  # Angle in radians, presumably.

    GameLoop is agent:
        play(rect, number);
        on_quit(!);
        on_mouse(!(mouse_event));
        on_button_down(!(button_event));
        on_button_up(!(button_event));
        on_key_down(!(key_event));
        on_key_up(!(key_event));
        on_tick(!(display));
    end;
    
    mouse_event is (
        pos : rect, rel : rect,
        left : flag, middle : flag, right : flag,
        is_touch : flag,
    );

    button_event is (pos:rect, button:number, is_touch:flag);
    key_event is (unicode:string, key:number, mods:number, scancode:number);
    
    display is agent:
        draw(list[pic]);
        # Maybe eventually some messages for setting screen mode, or grabs, or whatnot.
    end;
    
    pic is case:
        fill(color:color);
        # Soon more things you can draw on a surface.
        # Eventually add (native) functions to create intermediate surfaces.
        # Ideally, memoization takes care of not reloading images too frequently.
    esac;

assume:
    r, r1, r2 : rect;
    scalar, angle: number;
    p, p1, p2 : polar;

define:

    # A color is apparently an RGB triple of values in the range 0..255.
    # Things outside this range are prone to toss an exception.
    black = color(0,0,0);
    white = color(255,255,255);

    # Simple 2-D vector math and trigonometry:
    add_rect(r1, r2) = rect(r1.x+r2.x, r1.y+r2.y);
    subtract_rect(r1, r2) = rect(r1.x-r2.x, r1.y-r2.y);
    scale_rect(scalar, r) = rect(scalar*r.x, scalar*r.y);
    unit_vector(angle) = rect(cos(angle), sin(angle));
    as_rect(p) = scale_rect(p.magnitude, unit_vector(p.angle));
    as_polar(r) = polar(magnitude_of(r), angle_of(r));
    magnitude_of(r) = sqrt(r.x*r.x + r.y*r.y);
    angle_of(r) = atan2(r.y, r.x);
    norm(r) = scale_rect(1/magnitude_of(r), r);
    dot(r1, r2) = r1.x*r2.x + r1.y*r2.y;


