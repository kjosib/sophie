# Built-in / primitive definitions and types are in the docstring of this Python file.
# Native types flag, number, and string are installed separately in "native" Python.
# Also for the moment, I import (most of) Python's math library.

# The turtle-graphics stuff that used to be here has moved to its own separate library.

import:

foreign "math" where

	e, inf, nan, pi, tau : number;

	acos, acosh, asin, asinh, atan, atanh,
	ceil, cos, cosh, degrees, erf, erfc, exp, expm1,
	fabs, factorial, floor, gamma,
	isqrt, lcm, lgamma, log, log10, log1p, log2,
	modf, radians, sin, sinh, sqrt,
	tan, tanh, trunc, ulp : (number) -> number;

	isfinite, isinf, isnan : (number) -> flag;

	atan2, comb, copysign, dist, fmod, gcd, ldexp, log_base@"log",
	nextafter, perm, pow, remainder : (number, number) -> number;

end;

foreign "builtins" where
	chr, str : (number) -> string;
	len, ord : (string) -> number;
	int : (number) -> number;
end;

foreign "sophie.adapters.yarn" where
	mid : (string, number, number) -> string;
	val : (string) -> maybe[number];
	strict@"identity" : [a] (a)->a;  # Proof of concept; test-case; what-have-you.
end;

foreign "operator" where
	strcat@"add" : (string, string) -> string;
end;

# A few of Python's standard math functions are trouble (currently).
	# ``log`` is bivalent: You can pass it one or two parameters. Sophie gets around this by aliasing ``log_base``.
	# ``dist`` computes Euclidean distance between two points specified as vectors, but Sophie still lacks these.
	# ``fsum``, ``prod``, and ``hypot`` also work on vectors; same problem. (Pure-Sophie versions are provided.)
	# ``frexp`` returns a tuple, which would confuse the evaluator. It needs an adapter to a known record type.

foreign "sophie.adapters.teletype_adapter"
    where console : Console;
end;

type:
	list[x] is CASE:
		 cons(head:x, tail:list[x]);
		 nil;
	ESAC;
	maybe[x] is case:
	    this(item:x);
	    nope;
	esac;

	pair[a,b] is (fst:a, snd:b);

	Console is agent:
		echo(list[string]);
		read((string)->act);
		random((number)->act);
	end;
	
define:
	id(x) = x;
	any(xs) = case xs of nil -> no; cons -> xs.head or any(xs.tail); esac;
	all(xs) = case xs of nil -> yes; cons -> xs.head and all(xs.tail); esac;

	map(fn, xs) = case xs of
		nil -> nil;
		cons -> cons(fn(xs.head), map(fn, xs.tail));
	esac;

	filter(predicate, xs) = case xs of
		nil -> nil;
		cons -> cons(xs.head, rest) if predicate(xs.head) else rest where
			rest = filter(predicate, xs.tail);
		end cons;
	esac;

	reduce(fn, a, xs) = case xs of
		nil -> a;
		cons -> reduce(fn, fn(a, xs.head), xs.tail);
	esac;

	cat(xs,ys) = case xs of
		nil -> ys;
		cons -> cons(xs.head, cat(xs.tail, ys));
	esac;

	flat(xss) = case xss of
		nil -> nil;
		cons -> cat(xss.head, flat(xss.tail));
	esac;

	take(n, xs) = nil if n < 1 else case xs of
		nil -> nil;
		cons -> cons(xs.head, take(n-1, xs.tail));
	esac;

	drop(n, xs) = xs if n < 1 else case xs of
		nil -> nil;
		cons -> drop(n-1, xs.tail);
	esac;

	sum(xs) = reduce(add, 0, xs) where add(a,b) = a+b; end sum;
	product(xs) = reduce(mul, 1, xs) where mul(a,b) = a*b; end product;
	hypot(xs) = sqrt(sum(map(square, xs))) where square(x) = x*x; end hypot;

	## Sophie's first namespace conflict:
	# left(s, n) = mid(s, 0, n);
	# right(s, n) = mid(s, len(s)-n, len(s));

	join(ss) = reduce(strcat, "", ss);  # Yes, this is O(n^2). Fixing that from within is nontrivial.

	interleave(x, ys) = drop(1, flat(map(prefix, ys))) where prefix(y)=cons(x, cons(y, nil)); end interleave;

	each_chr(s) = from(0) where
		from(n) = nil if n >= len(s) else cons(mid(s,n,1), from(n+1));
	end each_chr;

    EOL = chr(10);

end.
