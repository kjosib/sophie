# Mandelbrot set as graphics.
# Most of the same concept as the text-mode version, but draw many small rectangles.
# Paints one row per tick of the game clock, assuming the machine can keep up.
# The release-mode VM on the author's machine does keep up.

import:
sys."2d" (xy);
sys."game" as game (events, rgb, stroke, fill_box, black);
sys."complex" (complex, squared_magnitude);

type:

range is (start:number, stop:number);

assume:
z, c: complex;
n: number;

define:

# The key concept of the Mandelbrot set:
classify(c) = f(max_steps, c) where
    f(n, z) = case
        when n <= 0 then 0;
        when squared_magnitude(z) > 4 then max_steps - n;
        else f(n-1, z*z + c);
    esac;
end classify;

# Everything else is window dressing:
res = xy(640, 480);
box_scale = xy(2, 2);
window_size = xy(res.x * box_scale.x, res.y * box_scale.y);

horizontal = range(-2, 0.6);
vertical = range(1.3, -1.3);
max_steps = palette_length * 4;

interpolate(r:range, t:number) = r.start * (1-t) + r.stop * t;

color(n) = surely(index(n mod palette_length, palette));
palette = [
	rgb($00, $00, $00), rgb($99, $00, $00), rgb($99, $99, $00),
	rgb($00, $99, $00), rgb($00, $99, $99), rgb($00, $00, $99),
	rgb($99, $00, $99), rgb($99, $99, $99), rgb($ff, $00, $00),
	rgb($ff, $ff, $00), rgb($00, $ff, $00), rgb($00, $ff, $ff),
	rgb($00, $00, $ff), rgb($ff, $00, $ff), rgb($ff, $ff, $ff),
];
palette_length = length(palette);

cell(corner:xy, z:complex) : image_element@game
= stroke(color(classify(z)), [ fill_box(corner, box_scale) ] );

row_for(y_scaled, im) : list[image_element@game] = map(brick, horizontal_steps) where
	brick(x) = cell(corner, z) where
		corner = xy(x*box_scale.x, y_scaled);
		z = complex(re, im);
		re = interpolate(horizontal, (x+0.5)/res.x);
	end brick;
end row_for;

horizontal_steps = iota(0, res.x);

agent painter(y:number) as
	to tick(display) is case
		when my y < res.y then do
			display ! draw(row_for(my y*box_scale.y, interpolate(vertical, (my y+0.5) / res.y)));
			my y := my y + 1;
		end;
		else skip;
	esac;
end painter;

begin:
    cast  # in order of appearance:
        p is painter(0);
    do
        events ! on_tick(p ! tick);
    end;
    events ! play(window_size, 60);
end.

