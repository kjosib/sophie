# The motivating example is to portray crossed lines that intersect at the mouse cursor.
# That means carrying state from the mouse-move event through to the clock-tick event.


import:

    sys."2d" (xy);
    sys."game" as game (events, rgb, fill, stroke, black, white, hlin, vlin, box, circle);


define:

### The main attraction:

    agent mouse_chaser( pos:xy ) as
    
        to mouse(event) is do
            my pos := event.pos;  # Assignment should not look like equality.
        end;
        
        to tick(display) is display ! draw [
            fill(rgb(0,$99,0)),   # Apple ][ style hexadecimal with dollar-sign.
            stroke(white, cat(cross_hairs(my pos), lines_from_each_corner_to(my pos))),
            stroke(black, reticle(my pos)),
        ];
        
    end mouse_chaser;



### A few composite graphical elements:
    
    cross_hairs(pos) = [ hlin(0, 799, pos.y), vlin(pos.x, 0, 599) ];
    
    lines_from_each_corner_to(pos) = map(one_such_line, corners_of_the_window) where
        one_such_line(a_corner) = line@game(a_corner, pos);
    end lines_from_each_corner_to;
    
    reticle(pos) = [
        box(xy(pos.x-10, pos.y-10), xy(20, 20)),
        circle(pos, 30),
    ];



### Some general configuration:
    
    window_size = xy(800, 600);
    corners_of_the_window = [ xy(0,0), xy(799,0), xy(799, 599), xy(0,599) ];
    
    initial_state = mouse_chaser(xy(100, 100));



begin:
    cast  # in order of appearance:
        mc is initial_state;
    do
        events ! on_mouse(mc ! mouse);
        events ! on_tick(mc ! tick);
    end;
    events ! play(window_size, 60);
end.
