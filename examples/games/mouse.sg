# The motivating example is to portray crossed lines that intersect at the mouse cursor.
# That means carrying state from the mouse-move event through to the clock-tick event.

# Because the fields on an agent/actor are mutable, it places constraints on laziness.
# We see this sharply in the `to tick` behavior.

import:
sys."game" as game (events, rect, color, fill, white, hlin, vlin);

define:
    agent mouse_chaser( pos:rect ) as
    
        # Defined thus, presumably `mouse_chaser` is best understood as a concrete class.
        # The constructor arguments are just a `rect` called `pos` locally.
    
        to mouse(e) is do
            console ! echo ["mouse ", str(e.pos.x), ",", str(e.pos.y), EOL];
            my pos := e.pos;  # Assignment should not look like equality.
        end;
        
        to tick(display) is display ! draw [
            fill(color(0,$99,0)),   # Apple ][ style hexadecimal with dollar-sign.
            
            hlin(0, 799, self.pos.y, white),  # The `pos` must be evaluated strictly,
            vlin(self.pos.x, 0, 599, white),  # along with parent expressions,
                                              # since it and they are volatile.
        ];
        
    end mouse_chaser;
    
    initial_state = mouse_chaser(rect(-1,-1));
    
    # This makes `initial_state` a more-specific template, not an actor in itself.

begin:
    cast  # in order of appearance:
        mc is initial_state;
    do
        events ! on_mouse(mc ! mouse);
        events ! on_tick(mc ! tick);
    end;
    events ! play( rect(800, 600), 60);
end.
