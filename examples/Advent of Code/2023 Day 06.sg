# https://adventofcode.com/2023/day/6

# There's only one file for this day becuase the two parts were so closely related.
# Also, the input was small enough to hand-jam into the begin-block
# rather than pull from a file.

type:
	race is (time:number, distance:number);
define:

# The charge-time corresponding to a given distance is the solution to a quadratic equation:
# d = x * (t-x)
# d = tx - x^2
# x^2 -tx + d = 0
#
# There are as many ways to win as integers between the roots.
# Conveniently, that equals the difference between the floors of the two roots.
ways_to_win(r) = floor(upper) - floor(lower) where
	upper = max(x.fst, x.snd);
	lower = min(x.fst, x.snd);
	x = quadratic(1, -r.time, r.distance);
end ways_to_win;

# This is not numerically stable, but it should serve for the puzzle.
quadratic(a,b,c) = pair((-b+radical)/denom, (-b-radical)/denom) where
	radical = sqrt(b*b - 4*a*c);
	denom = 2*a;
end quadratic;

begin:
product(map(ways_to_win, [race(59, 597), race(79,1234), race(65,1032), race(75,1328)]));
ways_to_win(race(59_79_65_75, 597_1234_1032_1328));
