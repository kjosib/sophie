# https://adventofcode.com/2023/day/5

# This solution was delayed several days for some key improvements
# to the front-end and run-time.
# To wit:
# 1. The type-checker now understands type-aliases in parameter type annotations.
# 2. Hitting an absurdity at run-time now generates a useful stack trace.
#    That saves a ton of time solving bugs.

import:
"2023 Day 05 common" (seeds, least_of, each_segment);

type:
RangeMap is (destination: number, source: number, size:number);

assume:
p : predicate;

define:
goal(lines) = least_of(map(convert_all, seeds(lines))) where
	mappings = each_segment(lines, RangeMap);
	convert_all(nr) = reduce(convert_one, nr, mappings);
end goal;

convert_one(nr, range_maps:list[RangeMap]) = case range_maps of
	nil -> nr;
	cons -> case
		when included then nr + offset;
		else convert_one(nr, range_maps.tail);
	esac where
		included = rm.source <= nr and nr < rm.source + rm.size;
		offset = rm.destination - rm.source;
		rm = range_maps.head;
	end cons;
esac;

solve(lines) = console ! echo[str(int(goal(lines))), EOL];

begin:

filesystem!read_lines("/playground/advent of code/2023-d5", !solve);
