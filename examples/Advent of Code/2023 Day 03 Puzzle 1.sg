# See https://adventofcode.com/2023/day/3
# This solution mostly exercises lists, I think.
# I wrote it in chronological order as ideas occurred to me.
# Then, I pulled a few bits into the common area.

import:
"common" (is_digit);
"2023 Day 03 common" (range_matrix, rolling_combinations, Triple, map2, Range);

define:

# Given two sorted lists of ranges and points,
# return a list of part numbers.
part_numbers(ranges:list[Range], points:list[number]) : list[number]
= case ranges of
	nil -> nil;
	cons -> case points of
		nil -> nil;
		cons -> case
			when points.head < ranges.head.start - 1 then part_numbers(ranges, points.tail);
			when ranges.head.stop < points.head then part_numbers(ranges.tail, points);
			else cons(ranges.head.value, part_numbers(ranges.tail, points));
		esac;
	esac;
esac;

# Extract the indices within a line where a symbol is found,
# according to the definition given in the puzzle.
symbol_indices(line:string) : list[number]
= filter(is_symbol_at, iota(0, len(line))) where
	is_symbol_at(i) = is_symbol(mid(line, i, 1));
end symbol_indices;

# This is specific to the puzzle and so can't become generic,
# despite the generic-looking name.
is_symbol(ch) = ch != '.' and ord(ch) > 32 and not is_digit(ch);

# Given two sorted lists, produce a proper merged sorted list.
# Ties go to the left, giving the core of a stable merge-sort.
merge(left, right) = case left of
	nil -> right;
	cons -> case right of
		nil -> left;
		cons -> case
			when left.head <= right.head then cons(left.head, merge(left.tail, right));
			else cons(right.head, merge(left, right.tail));
		esac;
	esac;
esac;

merge3(t:Triple) = merge(t.a, merge(t.b, t.c));


# Something like this could get all the points corresponding to the
# symbols on each line that would make numbers into part numbers:
part_number_points(lines) = rolling_combinations(merge3, map(symbol_indices, lines));

# Now I need the list of digit ranges.

solve(lines) = console ! echo[str(goal(lines)), EOL];
goal(lines) = sum(flat(map2(part_numbers, range_matrix(lines), part_number_points(lines))));




begin:

filesystem!read_lines("/playground/advent of code/2023-d3", !solve);

