# Commonalities across different puzzles
# These functions (and perhaps types?)
# become interesting candidates for either standard preamble
# or a standard utility library.

# I started this when working on 2023 day 3 puzzle 1,
# which was the seventh puzzle I attempted.

define:

slice(subject, start, stop) = mid(subject, start, stop - start);

is_digit(ch) = ord("0") <= ord(ch) and ord(ch) <= ord("9");
digit_value(digit) = ord(digit) - ord("0");

nums_in(s) = map(surely, map(val, split_on_whitespace(s)));

split_on_whitespace(s) = split_on_whitespace_at(0, s);

split_on_whitespace_at(offset, s) = case
	when offset >= len(s) then nil;
	when is_space_at(offset) then split_on_whitespace_at(offset+1, s);
	else cons(slice(s, offset, after), split_on_whitespace_at(after, s));
esac where
	is_space_at(i) = is_space(mid(s, i, 1));
	after = either(first(is_space_at, iota(offset+1, len(s))), len(s));
end split_on_whitespace_at;

is_space(ch) = ch == " ";

contains(x, xs) = case xs of
	nil -> no;
	cons -> xs.head == x or contains(x, xs.tail);
esac;

pair_off(fn, xs) = case xs of
	nil -> nil;
	cons -> case xs.tail as ys of
		nil -> nil;
		cons -> cons(fn(xs.head, ys.head), pair_off(fn, ys.tail));
	esac;
esac;

rolling_pairs(xs) = case xs of
	nil -> nil;
	cons -> roll2(xs.head, xs.tail);
esac where
	roll2(h, t) = case t of
		nil -> nil;
		cons -> cons(pair(h, t.head), roll2(t.head, t.tail));
	esac;
end rolling_pairs;

filter_maybe(xs:list[maybe[?x]]):list[?x] = case xs of
    nil -> nil;
    cons -> case xs.head as head of
        nope -> rest;
        this -> cons(head.item, rest);
    esac where
        rest = filter_maybe(xs.tail);
    end cons;
esac;

