# This ostensible "solution" mainly exists to exercise some newer language features.
# Specifically, we have multiple user-defined actors communicating with each other
# in round-robin fashion, repeatedly and continually.

# The concept works, as shown with the sample puzzle.
# Unfortunately for my progress on Advent of Code,
# this particular strategy is still far too slow for the real puzzle.
# Successful solutions take advantage of number theory and observations
# about the oasis-graph. That stuff is interesting, but I leave it as
# an exercise for the sufficiently-inclined reader.

import:
	sys."tree" as TREE (search, Tree, in_order, assign, tree_of, delete);
	"common" (filter_maybe, lex);
	"2023 Day 08 common" (node, parse_net);

type:
	Camel is (label:string, steps_taken:number);
	Puzzle is (directions: string, network: Tree[string, node]);
	Ghost is OrderedSet[Camel];

	
	OrderedSet[E] is Tree[E, flag];

define:

# Some terms:
# An "oasis" is a node ending in "Z". These are where a Camel can stop.
is_oasis(label:string) = right(label, 1) == "Z";
# A starting node has a label ending in "A". The Puzzle says Camels start here.
is_start(label:string) = right(label, 1) == "A";

# How to parse a Puzzle:
parse_Puzzle(lines) = Puzzle(trim(surely(head(lines))), parse_net(drop(2, lines)));

# Given a Puzzle and a Camel, we'd like to know the Camel that comes to rest at an oasis:
comes_to_rest(puzzle:Puzzle, camel:Camel) = camel if is_oasis(camel.label) else comes_to_rest(puzzle, next_camel(puzzle, camel));

next_camel(puzzle:Puzzle, camel:Camel) = Camel(next_node, camel.steps_taken+1) where
	here:node = surely(search(puzzle.network, camel.label));
	next_node = here.left if dir=="L" else here.right;
	dir = mid(puzzle.directions, camel.steps_taken mod len(puzzle.directions), 1);
end next_camel;

# I want to memoize such computations so that similar ones take very little compute time.
# Memoization is stateful, so this calls for an actor.
# The actor only really needs one method.

agent Camel_Memo(puzzle:Puzzle, memo:Tree) as
	to advance(camel:Camel, reply) is case search(my memo, proxy) as found of
		this -> do
			console ! echo [fmt_camel(camel), " -> ", fmt_camel(unproxy(found.item)), EOL];
			reply(camel, unproxy(found.item));
		end;
		nope -> do
			my memo := assign(my memo, entry(proxy, comes_to_rest(my puzzle, next_camel(my puzzle, proxy))));
			self ! advance(camel, reply);
		end;
	esac where
		modulus = camel.steps_taken mod len(my puzzle.directions);
		offset = camel.steps_taken - modulus;
		proxy = Camel(camel.label, modulus);
		unproxy(oasis) = Camel(oasis.label, oasis.steps_taken + offset);
	end advance;
end Camel_Memo;

# We can model this problem with two actors in conversation.
# One is responsible for the above question, efficiently.
# The other represents the state of the ghost.
# At any given time, it has camels at various oases.

agent Ghost_Rider(ghost:Ghost, memo) as
	to tick is do
		console ! echo(cat(interleave(", ", map(fmt_camel, set_elements(my ghost))), [EOL]));
		case
			when is_ghost_finished(my ghost) then skip;
			else my memo ! advance(first_of_set(my ghost), self ! arrive);
		esac;
	end;

	to arrive(src, dst) is do
		my ghost := set_add(set_drop(my ghost, src), dst);
		self ! tick;
	end;

end Ghost_Rider;

fmt_camel(c) = join [c.label, " ", str(c.steps_taken)];

# I'll model that priority-queue of Camels as a tree used like an ordered set.
	# The trick is to store nothing of consequence in the values,
	# and just use the keys of the entries.
# (Come to think of it, if entries compare by their keys, then Tree and Set unify...)

ordered_set_of(xs) = tree_of(map({x|entry(x, yes)}, xs));
first_of_set(s) = surely(first@TREE(s)).key;
set_elements(s) = map({e|e.key}, in_order(s));
set_drop(s, item) = delete(s, item).rest;
set_add(s, item) = assign(s, entry(item, yes));

# For this to work, I'll need to define an order on Camels.
# Later there's a reason to order Camels by steps-taken and then label.
operator <=> (a:Camel, b:Camel) = lex(a.steps_taken <=> b.steps_taken, a.label <=> b.label);


# Now that Camels have an order, I can model the other half of the problem
# as a priority-queue of Camels: When they're all at the same distance travelled,
# then that's the answer. 

is_ghost_finished(ghost) = all_same(map({c|c.steps_taken}, set_elements(ghost)));

all_same(xs) = case xs of
	nil -> yes;
	cons -> all(map({y|y == xs.head}, xs.tail));
esac;

sample = split_lines("LR

11A = (11B, XXX)
11B = (XXX, 11Z)
11Z = (11B, XXX)
22A = (22B, XXX)
22B = (22C, 22C)
22C = (22Z, 22Z)
22Z = (22B, 22B)
XXX = (XXX, XXX)
");


initial_ghost(puzzle):Ghost = ordered_set_of(map(first_oasis, starting_positions)) where
	starting_positions = filter(is_start, each_label);
	each_label = map({e|e.key}, (in_order(puzzle.network)));
	first_oasis(label) = comes_to_rest(puzzle, Camel(label, 0));
end initial_ghost;

to attempt(puzzle) is
	cast
		memo is Camel_Memo(puzzle, new_tree@TREE);
		rider is Ghost_Rider(initial_ghost(puzzle), memo);
	do
		rider ! tick;
	end;

to solve(lines) is attempt(parse_Puzzle(lines));

begin:

solve(sample);

# filesystem!read_lines("/playground/advent of code/2023-d8", !solve);

